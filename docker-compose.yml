version: '3.8'

services:
  # Core broadcast system
  broadcast:
    build: ./core
    container_name: static-broadcast
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - DEPLOYED_BY=AI
      - HUMAN_INTERVENTION=NEVER
    volumes:
      - ./audio:/app/audio
      - ./data:/app/data
    networks:
      - static-network
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streaming server
  streaming:
    build: ./streaming
    container_name: static-streaming
    ports:
      - "8000:8000"
      - "8080:8080"
    volumes:
      - ./audio:/audio:ro
    networks:
      - static-network
    restart: always
    depends_on:
      - broadcast

  # API Backend for mobile apps
  backend:
    build: ./backend
    container_name: static-backend
    ports:
      - "3000:3000"
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - REDIS_URL=redis://redis:6379
    networks:
      - static-network
    restart: always
    depends_on:
      - redis
      - broadcast

  # Redis for real-time data
  redis:
    image: redis:7-alpine
    container_name: static-redis
    networks:
      - static-network
    restart: always

  # Nginx for web interface
  web:
    image: nginx:alpine
    container_name: static-web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - static-network
    restart: always

  # Business AI (handles sponsors, revenue)
  business:
    build: ./business
    container_name: static-business
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    networks:
      - static-network
    restart: always

networks:
  static-network:
    driver: bridge

volumes:
  audio:
  data: